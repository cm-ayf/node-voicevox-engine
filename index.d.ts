/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface InitializeOptions {
  accelerationMode: AccelerationMode
  cpuNumThreads: number
}
export const enum AccelerationMode {
  Auto = 0,
  Cpu = 1,
  Gpu = 2,
}
export interface UserDictWord {
  /** 単語の表記。 */
  surface: string
  /** 単語の読み。 */
  pronunciation: string
  /** アクセント型。 */
  accentType: number
  /** 単語の種類。 */
  wordType: UserDictWordType
  /** 単語の優先度。 */
  priority: number
}
export const enum UserDictWordType {
  /** 固有名詞。 */
  ProperNoun = 0,
  /** 一般名詞。 */
  CommonNoun = 1,
  /** 動詞。 */
  Verb = 2,
  /** 形容詞。 */
  Adjective = 3,
  /** 接尾辞。 */
  Suffix = 4,
}
export class OpenJtalk {
  constructor(openJtalkDictDir: string)
  useUserDict(userDict: UserDict): void
}
export class Synthesizer {
  static new(openJtalkDictDir: string, options: InitializeOptions): Promise<Synthesizer>
  static newWithInitialize(openJtalk: OpenJtalk, options: InitializeOptions): Promise<Synthesizer>
  isGpuMode(): boolean
  metas(): Array<SpeakerMeta>
  loadVoiceModel(model: VoiceModel): Promise<void>
  unloadVoiceModel(voiceModelId: string): Promise<void>
  isLoadedVoiceModel(voiceModelId: string): Promise<boolean>
  audioQueryFromKana(kana: string, styleId: number): Promise<AudioQueryModel>
  audioQuery(text: string, styleId: number): Promise<AudioQueryModel>
  createAccentPhrasesFromKana(kana: string, styleId: number): Promise<AccentPhrases>
  createAccentPhrases(text: string, styleId: number): Promise<AccentPhrases>
  replaceMoraData(accentPhrases: AccentPhrases, styleId: number): Promise<AccentPhrases>
  replacePhonemeLength(accentPhrases: AccentPhrases, styleId: number): Promise<AccentPhrases>
  replaceMoraPitch(accentPhrases: AccentPhrases, styleId: number): Promise<AccentPhrases>
  synthesis(audioQuery: AudioQueryModel, styleId: number, options?: TtsOptions | undefined | null): Promise<Uint8Array>
  ttsFromKana(kana: string, styleId: number, options?: TtsOptions | undefined | null): Promise<Uint8Array>
  tts(text: string, styleId: number, options?: TtsOptions | undefined | null): Promise<Uint8Array>
}
export class TtsOptions {
  enableInterrogativeUpspeak: boolean
}
export class AudioQueryModel {}
export class AccentPhrases {}
export class UserDict {
  constructor()
  load(path: string): void
  save(path: string): void
  addWord(word: UserDictWord): string
  updateWord(wordUuid: string, word: UserDictWord): void
  removeWord(wordUuid: string): UserDictWord
  import(other: UserDict): void
  get words(): void
}
export class VoiceModel {
  static fromPath(path: string): Promise<VoiceModel>
  get id(): string
  get metas(): Array<SpeakerMeta>
}
export class SpeakerMeta {
  get name(): string
  get styles(): Array<StyleMeta>
  get version(): string
  get speakerUuid(): string
}
export class StyleMeta {
  get id(): number
  get name(): string
}
